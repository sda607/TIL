# `1장: JPA 소개`

> JPA를 사용해서 얻은 가장 큰 성과는 애플리케이션을 SQL이 아닌 객체 중심으로 개발하니 생산성과 유지보수가 확연히 좋아졌고 테스트를 작성하기도 편해진 점
반복적인 CRUD SQL을 작성하고 객체를 SQL에 매핑하는 데 시간을 보내기에는 우리의 시간이 너무 아깝다. 이미 많은 자바 개발자들이 오랫동안 비슷한 고민을 해왔고 문제를 해결하려고 많은 노력을 기울여왔다.
<br>
## `SQL을 직접 다룰 때 발생하는 문제점`
```sql
SELECT meber_id FROM Member M WHERE member_id = ?
```
- 회원 조회용 SQL 

위의 SQL을 실행하기 위해서 JDBC를 이용한다면 아래와 같은 많은 작업들이 필요합니다.

<br>

```java
ResultSet rs = stmt.executeQuery(sql)
```

실행하는 것 중에 하나이지만 위와 같이 쿼리를 실행하고 결과를 받기 위해서는 아래와 같이 매핑이 또 필요합니다. 

<br>

```java
Member member = rs.getString("member_id")
member.setMeberId(memberId);
member.setName(name);
```

단순히 `SELECT` 하나만 실행 했지만 상당히 번거로운 작업들이 많습니다. 다른 INSERT 등등 CUD에 해당하는 쿼리들도 마찬가지 입니다.

<br> <br>

### `Member class 필드 추가`

```java
public class Member {
    private String memberId;
    private String name;
    private String tel;  // 추가
    
}
```

Member 클래스의 위와 같이 `tel` 필드가 하나 추가 됐다면 어떻게 될까요? 기존에 작성했던 `SELECT`, `INSERT`, `UPDATE`, `DELETE` 등등 Member 관련 쿼리들에 필요하다면 모두 수정을 해야 할 것입니다. 
`매우 불편한 상황인 것인데요.` 객체지향임에도 불구하고 `SQL에 의존적인` 코드를 작성하고 있다고 할 수 있습니다.

<br> <br>
